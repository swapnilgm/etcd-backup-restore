---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-etcd-bootstrap
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: etcd
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
data:
  bootstrap.sh: |-
    #!/bin/sh
    VALIDATION_MARKER=/var/etcd/data/validation_marker

{{- if .Values.backupRestoreTLS }}
    # install wget from apk in order to pass --ca-certificate flag because
    # busybox wget only has bare minimum features, without --ca-certificate option
    apk update
    apk add wget
{{- end }}

    trap_and_propagate() {
        PID=$1
        shift
        for sig in "$@" ; do
            trap "kill -$sig $PID" "$sig"
        done
    }

    start_managed_etcd(){
          rm -rf $VALIDATION_MARKER
          etcd --config-file /var/etcd/config/etcd.conf.yaml &
          ETCDPID=$!
          trap_and_propagate $ETCDPID INT TERM
          wait $ETCDPID
          RET=$?
          echo $RET > $VALIDATION_MARKER
          exit $RET
    }

    check_and_start_etcd(){
          while true;
          do
            wget {{ if .Values.backupRestoreTLS }}--ca-certificate=/var/etcdbr/ssl/ca/ca.crt "https{{ else }}"http{{ end }}://localhost:{{ .Values.servicePorts.backupRestore }}/initialization/status" -S -O status;
            STATUS=`cat status`;
            case $STATUS in
            "New")
                  wget {{ if .Values.backupRestoreTLS }}--ca-certificate=/var/etcdbr/ssl/ca/ca.crt "https{{ else }}"http{{ end }}://localhost:{{ .Values.servicePorts.backupRestore }}/initialization/start?mode=$1{{- if .Values.backup.failBelowRevision }}&failbelowrevision={{ int $.Values.backup.failBelowRevision }}{{- end }}" -S -O - ;;
            "Progress")
                  sleep 1;
                  continue;;
            "Failed")
                  sleep 1;
                  continue;;
            "Successful")
                  echo "Bootstrap preprocessing end time: $(date)"
                  start_managed_etcd
                  break
                  ;;
            *)
                  sleep 1;
                  ;;
            esac;
          done
    }

    echo "Bootstrap preprocessing start time: $(date)"
    if [ ! -f $VALIDATION_MARKER ] ;
    then
          echo "No $VALIDATION_MARKER file. Perform complete initialization routine and start etcd."
          check_and_start_etcd full
    else
          echo "$VALIDATION_MARKER file present. Check return status and decide on initialization"
          run_status=`cat $VALIDATION_MARKER`
          echo "$VALIDATION_MARKER content: $run_status"
          if [ $run_status == '143' ] || [ $run_status == '130' ] || [ $run_status == '0' ] ; then
                echo "Requesting sidecar to perform sanity validation"
                check_and_start_etcd sanity
          else
                echo "Requesting sidecar to perform full validation"
                check_and_start_etcd full
          fi
    fi
  etcd.conf.yaml: |-
    # Human-readable name for this member.
    name: "{{ .Values.etcd.name }}"

    # Path to the data directory.
    data-dir: /var/etcd/data/new.etcd

    # metrics configuration
    metrics: basic

    # Number of committed transactions to trigger a snapshot to disk.
    snapshot-count: 75000

    # Raise alarms when backend size exceeds the given quota. 0 means use the
    # default quota.
    {{- if .Values.backup.etcdQuotaBytes }}
    quota-backend-bytes: {{ int $.Values.backup.etcdQuotaBytes }}
    {{- end }}

    # List of comma separated URLs to listen on for peer traffic.
    listen-peer-urls: {{ if .Values.etcdTLS }}https{{ else }}http{{ end }}://0.0.0.0:{{ .Values.servicePorts.server }}

    # List of comma separated URLs to listen on for client traffic.
    listen-client-urls: {{ if .Values.etcdTLS }}https{{ else }}http{{ end }}://0.0.0.0:{{ .Values.servicePorts.client }}

    # List of this member's peer URLs to advertise to the rest of the cluster.
    # The URLs needed to be a comma-separated list.
    initial-advertise-peer-urls: {{ if .Values.etcdTLS }}https{{ else }}http{{ end }}://{{ .Release.Name}}-etcd-client:{{ .Values.servicePorts.server }}

    # List of this member's client URLs to advertise to the public.
    # The URLs needed to be a comma-separated list.
    advertise-client-urls: {{ if .Values.etcdTLS }}https{{ else }}http{{ end }}://0.0.0.0:{{ .Values.servicePorts.client }}

    # Initial cluster configuration for bootstrapping.
    initial-cluster: "{{ .Values.etcd.initialCluster }}"
    # Initial cluster token for the etcd cluster during bootstrap.
    initial-cluster-token: "{{ .Values.etcd.initialClusterToken }}"

    # Initial cluster state ('new' or 'existing').
    initial-cluster-state: 'new'

{{- if .Values.etcdTLS }}
    client-transport-security:
      # Path to the client server TLS cert file.
      cert-file: /var/etcd/ssl/tls/tls.crt

      # Path to the client server TLS key file.
      key-file: /var/etcd/ssl/tls/tls.key

      # Enable client cert authentication.
      client-cert-auth: true

      # Path to the client server TLS trusted CA cert file.
      trusted-ca-file: /var/etcd/ssl/ca/ca.crt
{{- end }}

  etcdbr.conf.yaml: |-
    # etcd-connection-config
    etcdConnectionConfig:
      connectionTimeout: "{{ .Values.backup.etcdConnectionTimeout }}"
{{- if and .Values.etcdAuth.username .Values.etcdAuth.password }}
      username: "{{ .Values.etcdAuth.username }}"
      password: "{{ .Values.etcdAuth.password }}"
{{- end }}
{{- if .Values.etcdTLS }}
      endpoints:
        - "https://localhost:{{ .Values.servicePorts.client }}"
      insecureTransport: false
      insecureSkipVerify: false
      certFile: "/var/etcd/ssl/tls/tls.crt"
      keyFile: "/var/etcd/ssl/tls/tls.key"
      caFile: "/var/etcd/ssl/ca/ca.crt"
{{ else }}
      endpoints:
        - "http://localhost:{{ .Values.servicePorts.client }}"
{{- end }}

    leaderElectionConfig:
      retryPeriod: "5s"

    serverConfig:
      port: 8080
      # enableProfiling: false
{{- if .Values.backupRestoreTLS }}
      server-cert: "/var/etcdbr/ssl/tls/tls.crt"
      server-key: "/var/etcdbr/ssl/tls/tls.key"
{{- end }}
    snapshotterConfig:
      schedule: "{{ .Values.backup.schedule }}"
      deltaSnapshotPeriod: {{ .Values.backup.deltaSnapshotPeriod }}
      deltaSnapshotMemoryLimit: {{ int $.Values.backup.deltaSnapshotMemoryLimit }}
      garbageCollectionPeriod: 1m
      garbageCollectionPolicy: {{ .Values.garbageCollectionPolicy }}
{{- if eq .Values.backup.garbageCollectionPolicy "LimitBased" }}
      maxBackups: {{ .Values.backup.maxBackups }}
{{- end }}

    snapstoreConfig:
      provider: {{ .Values.backup.storageProvider }}
      container: {{ .Values.backup.storageContainer }}
      prefix: {{ .Release.Name }}-etcd
      maxParallelChunkUploads: 5
      tempDir: "/tmp"

    restorationConfig:
      initialCluster: "{{ .Values.etcd.initialCluster }}"
      initialClusterToken: "{{ .Values.etcd.initialClusterToken }}"
      restoreDataDir: /var/etcd/data/new.etcd
      initialAdvertisePeerURLs:
        - {{ if .Values.etcdTLS }}https{{ else }}http{{ end }}://{{ .Release.Name}}-etcd-client:{{ .Values.servicePorts.server }}
      name: {{ .Values.etcd.name }}
      # skipHashCheck: false
      # maxFetchers: 6
{{- if .Values.backup.etcdQuotaBytes }}
      embeddedEtcdQuotaBytes: {{ int $.Values.backup.etcdQuotaBytes }}
{{- end }}
{{- if .Values.backup.defragmentationSchedule }}
    defragmentationSchedule: "0 0 */3 * *"
{{- end }}